(undo-tree-save-format-version . 1)
"2346eb6a72e78bb2ac36c8b730570a0cdf483153"
[nil nil nil nil (25192 5430 77091 0) 0 nil]
([nil nil ((#("    print(\"private key\")" 0 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 23 (fontified t face font-lock-string-face) 23 24 (fontified t face (rainbow-delimiters-depth-1-face))) . 1093) (t 25192 5396 271827 713000)) nil (25192 5430 77090 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 1093) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1)) nil (25192 5435 959821 0) 0 nil])
([nil nil ((#("\"97dc393924f6d82795f4caf56a79b88ff4df036b04db076f2d254f6bfe0ea869\"" 0 66 (fontified t face font-lock-string-face)) . 1158) (undo-tree-id9 . -55) (undo-tree-id10 . -66) (undo-tree-id11 . 10) (undo-tree-id12 . -59) (undo-tree-id13 . -46) (undo-tree-id14 . -66) (undo-tree-id15 . 66) (undo-tree-id16 . -1) (undo-tree-id17 . 65) (undo-tree-id18 . -65) (undo-tree-id19 . 1) (undo-tree-id20 . -66) 1159) nil (25192 5452 203560 0) 0 nil] [nil nil ((#("    print(config[\"wallets\"][\"from_key\"])" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 38 (fontified t face font-lock-string-face) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t face (rainbow-delimiters-depth-1-face))) . 1093)) ((nil ws-butler-chg delete 1133 . 1134) (1093 . 1133)) (25192 5434 902626 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1186 . 1187) (nil fontified nil 1186 . 1187) (nil fontified nil 1176 . 1186) (nil fontified nil 1175 . 1176) (nil fontified nil 1174 . 1175) (nil fontified nil 1165 . 1174) (nil fontified nil 1164 . 1165) (nil fontified nil 1158 . 1164) (1158 . 1187)) nil (25192 5452 203548 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 1093) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . 1) (undo-tree-id5 . -1)) ((1093 . 1094) (t 25192 5430 78766 158000)) (25192 5430 77081 0) 0 nil])
([nil nil ((#("print(config[\"wallets\"][\"from_key\"])" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 22 (fontified t face font-lock-string-face) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 34 (fontified t face font-lock-string-face) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-1-face))) . 1097) (undo-tree-id126 . -30) (undo-tree-id127 . -35) (undo-tree-id128 . -36) (undo-tree-id129 . -36) (undo-tree-id130 . -36) (undo-tree-id131 . -36) (undo-tree-id132 . -36) (undo-tree-id133 . -36) (undo-tree-id134 . -36) (undo-tree-id135 . -35) (undo-tree-id136 . -36) (undo-tree-id137 . -35) (undo-tree-id138 . -36) (undo-tree-id139 . -35) (undo-tree-id140 . -36) (undo-tree-id141 . -35) (undo-tree-id142 . -36) (undo-tree-id143 . -33) (undo-tree-id144 . -34) (undo-tree-id145 . -33) (undo-tree-id146 . -34) (undo-tree-id147 . -35) (undo-tree-id148 . -36) (undo-tree-id149 . -35) (undo-tree-id150 . -36) (undo-tree-id151 . -5) (undo-tree-id152 . -6) (undo-tree-id153 . -36) (undo-tree-id154 . -36) (undo-tree-id155 . -36) (undo-tree-id156 . -36) (undo-tree-id157 . -36) (undo-tree-id158 . -36) (undo-tree-id159 . -36) (undo-tree-id160 . -36) (undo-tree-id161 . -36) (undo-tree-id162 . -36) (undo-tree-id163 . -36) (undo-tree-id164 . -36) (undo-tree-id165 . -36) (undo-tree-id166 . -36) (undo-tree-id167 . -36) (undo-tree-id168 . -36) (undo-tree-id169 . -36) (undo-tree-id170 . -36) (t 25192 5452 205195 731000)) nil (25192 5454 723835 0) 0 nil])
nil
([nil nil ((#("    " 0 1 (fontified t) 1 4 (fontified t)) . 1093) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) 1097) nil (25192 5454 723810 0) 0 nil])
([nil nil ((#("
def fund_with_link(
    contract_address, account=None, link_token=None, amount=1000000000000000000
):
    account = account if account else get_account()
    link_token = link_token if link_token else get_contract(\"link_token\")
    ### Keep this line to show how it could be done without deploying a mock
    # tx = interface.LinkTokenInterface(link_token.address).transfer(
    #     contract_address, amount, {\"from\": account}
    # )
    tx = link_token.transfer(contract_address, amount, {\"from\": account})
    print(\"Funded {}\".format(contract_address))
    return tx


def deploy_mocks(decimals=DECIMALS, initial_value=INITIAL_VALUE):
    \"\"\"
    Use this script if you want to deploy mocks to a testnet
    \"\"\"
    print(f\"The active network is {network.show_active()}\")
    print(\"Deploying Mocks...\")
    account = get_account()
    print(\"Deploying Mock Link Token...\")
    link_token = LinkToken.deploy({\"from\": account})
    print(\"Deploying Mock Price Feed...\")
    mock_price_feed = MockV3Aggregator.deploy(
        decimals, initial_value, {\"from\": account}
    )
    print(f\"Deployed to {mock_price_feed.address}\")
    print(\"Deploying Mock VRFCoordinator...\")
    mock_vrf_coordinator = VRFCoordinatorV2Mock.deploy(
        BASE_FEE, GAS_PRICE_LINK, {\"from\": account}
    )
    print(f\"Deployed to {mock_vrf_coordinator.address}\")

    print(\"Deploying Mock Oracle...\")
    mock_oracle = MockOracle.deploy(link_token.address, {\"from\": account})
    print(f\"Deployed to {mock_oracle.address}\")
    print(\"Mocks Deployed!\")

" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 51 (fontified t) 51 55 (fontified t face font-lock-constant-face) 55 68 (fontified t) 68 72 (fontified t face font-lock-constant-face) 72 101 (fontified t) 101 102 (fontified t face (rainbow-delimiters-depth-1-face)) 102 108 (fontified t) 108 115 (fontified t face font-lock-variable-name-face) 115 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 137 (fontified t) 137 141 (fontified t face font-lock-keyword-face) 141 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-1-face)) 154 155 (fontified t face (rainbow-delimiters-depth-1-face)) 155 160 (fontified t) 160 170 (fontified t face font-lock-variable-name-face) 170 184 (fontified t) 184 186 (fontified t face font-lock-keyword-face) 186 198 (fontified t) 198 202 (fontified t face font-lock-keyword-face) 202 215 (fontified t) 215 216 (fontified t face (rainbow-delimiters-depth-1-face)) 216 228 (fontified t face font-lock-string-face) 228 229 (fontified t face (rainbow-delimiters-depth-1-face)) 229 234 (fontified t) 234 238 (fontified t face font-lock-comment-delimiter-face) 238 307 (fontified t face font-lock-comment-face) 307 311 (fontified t) 311 313 (fontified t face font-lock-comment-delimiter-face) 313 343 (fontified t face font-lock-comment-face) 343 377 (face font-lock-comment-face fontified t) 377 381 (fontified t) 381 387 (fontified t face font-lock-comment-delimiter-face) 387 431 (fontified t face font-lock-comment-face) 431 435 (fontified t) 435 437 (fontified t face font-lock-comment-delimiter-face) 437 439 (fontified t face font-lock-comment-face) 439 443 (fontified t) 443 445 (fontified t face font-lock-variable-name-face) 445 467 (fontified t) 467 468 (fontified t face (rainbow-delimiters-depth-1-face)) 468 494 (fontified t) 494 495 (fontified t face (rainbow-delimiters-depth-2-face)) 495 501 (fontified t face font-lock-string-face) 501 510 (fontified t) 510 511 (fontified t face (rainbow-delimiters-depth-2-face)) 511 512 (fontified t face (rainbow-delimiters-depth-1-face)) 512 517 (fontified t) 517 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t face (rainbow-delimiters-depth-1-face)) 523 534 (fontified t face font-lock-string-face) 534 535 (fontified t) 535 541 (fontified t face font-lock-builtin-face) 541 542 (fontified t face (rainbow-delimiters-depth-2-face)) 542 558 (fontified t) 558 559 (fontified t face (rainbow-delimiters-depth-2-face)) 559 560 (fontified t face (rainbow-delimiters-depth-1-face)) 560 565 (fontified t) 565 571 (fontified t face font-lock-keyword-face) 571 577 (fontified t) 577 580 (fontified t face font-lock-keyword-face) 580 581 (fontified t) 581 593 (fontified t face font-lock-function-name-face) 593 594 (fontified t face (rainbow-delimiters-depth-1-face)) 594 640 (fontified t) 640 641 (fontified t face (rainbow-delimiters-depth-1-face)) 641 647 (fontified t) 647 648 (syntax-table (15) fontified t face font-lock-doc-face) 648 718 (fontified t face font-lock-doc-face) 718 719 (syntax-table (15) fontified t face font-lock-doc-face) 719 724 (fontified t) 724 729 (fontified t face font-lock-keyword-face) 729 730 (fontified t face (rainbow-delimiters-depth-1-face)) 730 731 (fontified t) 731 778 (fontified t face font-lock-string-face) 778 779 (fontified t face (rainbow-delimiters-depth-1-face)) 779 784 (fontified t) 784 789 (fontified t face font-lock-keyword-face) 789 790 (fontified t face (rainbow-delimiters-depth-1-face)) 790 810 (fontified t face font-lock-string-face) 810 811 (fontified t face (rainbow-delimiters-depth-1-face)) 811 816 (fontified t) 816 823 (fontified t face font-lock-variable-name-face) 823 837 (fontified t) 837 838 (fontified t face (rainbow-delimiters-depth-1-face)) 838 839 (fontified t face (rainbow-delimiters-depth-1-face)) 839 844 (fontified t) 844 849 (fontified t face font-lock-keyword-face) 849 850 (fontified t face (rainbow-delimiters-depth-1-face)) 850 877 (fontified t face font-lock-string-face) 877 880 (face font-lock-string-face fontified t) 880 881 (face (rainbow-delimiters-depth-1-face) fontified t) 881 882 (fontified t) 882 886 (fontified t) 886 896 (fontified t face font-lock-variable-name-face) 896 915 (fontified t) 915 916 (fontified t face (rainbow-delimiters-depth-1-face)) 916 917 (fontified t face (rainbow-delimiters-depth-2-face)) 917 923 (fontified t face font-lock-string-face) 923 932 (fontified t) 932 933 (fontified t face (rainbow-delimiters-depth-2-face)) 933 934 (fontified t face (rainbow-delimiters-depth-1-face)) 934 939 (fontified t) 939 944 (fontified t face font-lock-keyword-face) 944 945 (fontified t face (rainbow-delimiters-depth-1-face)) 945 975 (fontified t face font-lock-string-face) 975 976 (fontified t face (rainbow-delimiters-depth-1-face)) 976 981 (fontified t) 981 996 (fontified t face font-lock-variable-name-face) 996 1022 (fontified t) 1022 1023 (fontified t face (rainbow-delimiters-depth-1-face)) 1023 1057 (fontified t) 1057 1058 (fontified t face (rainbow-delimiters-depth-2-face)) 1058 1064 (fontified t face font-lock-string-face) 1064 1073 (fontified t) 1073 1074 (fontified t face (rainbow-delimiters-depth-2-face)) 1074 1079 (fontified t) 1079 1080 (fontified t face (rainbow-delimiters-depth-1-face)) 1080 1085 (fontified t) 1085 1090 (fontified t face font-lock-keyword-face) 1090 1091 (fontified t face (rainbow-delimiters-depth-1-face)) 1091 1092 (fontified t) 1092 1131 (fontified t face font-lock-string-face) 1131 1132 (fontified t face (rainbow-delimiters-depth-1-face)) 1132 1137 (fontified t) 1137 1142 (fontified t face font-lock-keyword-face) 1142 1143 (fontified t face (rainbow-delimiters-depth-1-face)) 1143 1177 (fontified t face font-lock-string-face) 1177 1178 (fontified t face (rainbow-delimiters-depth-1-face)) 1178 1183 (fontified t) 1183 1203 (fontified t face font-lock-variable-name-face) 1203 1233 (fontified t) 1233 1234 (fontified t face (rainbow-delimiters-depth-1-face)) 1234 1269 (fontified t) 1269 1270 (fontified t face (rainbow-delimiters-depth-2-face)) 1270 1276 (fontified t face font-lock-string-face) 1276 1285 (fontified t) 1285 1286 (fontified t face (rainbow-delimiters-depth-2-face)) 1286 1291 (fontified t) 1291 1292 (fontified t face (rainbow-delimiters-depth-1-face)) 1292 1297 (fontified t) 1297 1302 (fontified t face font-lock-keyword-face) 1302 1303 (fontified t face (rainbow-delimiters-depth-1-face)) 1303 1304 (fontified t) 1304 1348 (fontified t face font-lock-string-face) 1348 1349 (fontified t face (rainbow-delimiters-depth-1-face)) 1349 1355 (fontified t) 1355 1360 (fontified t face font-lock-keyword-face) 1360 1361 (fontified t face (rainbow-delimiters-depth-1-face)) 1361 1382 (fontified t face font-lock-string-face) 1382 1387 (face font-lock-string-face fontified t) 1387 1388 (face (rainbow-delimiters-depth-1-face) fontified t) 1388 1389 (fontified t) 1389 1393 (fontified t) 1393 1404 (fontified t face font-lock-variable-name-face) 1404 1424 (fontified t) 1424 1425 (fontified t face (rainbow-delimiters-depth-1-face)) 1425 1445 (fontified t) 1445 1446 (fontified t face (rainbow-delimiters-depth-2-face)) 1446 1452 (fontified t face font-lock-string-face) 1452 1461 (fontified t) 1461 1462 (fontified t face (rainbow-delimiters-depth-2-face)) 1462 1463 (fontified t face (rainbow-delimiters-depth-1-face)) 1463 1468 (fontified t) 1468 1473 (fontified t face font-lock-keyword-face) 1473 1474 (fontified t face (rainbow-delimiters-depth-1-face)) 1474 1475 (fontified t) 1475 1510 (fontified t face font-lock-string-face) 1510 1511 (fontified t face (rainbow-delimiters-depth-1-face)) 1511 1516 (fontified t) 1516 1521 (fontified t face font-lock-keyword-face) 1521 1522 (fontified t face (rainbow-delimiters-depth-1-face)) 1522 1539 (fontified t face font-lock-string-face) 1539 1540 (fontified t face (rainbow-delimiters-depth-1-face)) 1540 1542 (fontified t)) . 2775) (undo-tree-id171 . -1542) (undo-tree-id172 . -643) (undo-tree-id173 . -1350) (undo-tree-id174 . -1350) (undo-tree-id175 . -1351) (undo-tree-id176 . -1351) (undo-tree-id177 . -1389) (undo-tree-id178 . -1389) (undo-tree-id179 . -1464) (undo-tree-id180 . -1464) (undo-tree-id181 . -1512) (undo-tree-id182 . -1512) (undo-tree-id183 . -1541) (undo-tree-id184 . -1541) (undo-tree-id185 . -1542) (undo-tree-id186 . -1542) (undo-tree-id187 . -643) (undo-tree-id188 . -643) (undo-tree-id189 . -651) (undo-tree-id190 . -651) (undo-tree-id191 . -712) (undo-tree-id192 . -712) (undo-tree-id193 . -720) (undo-tree-id194 . -720) (undo-tree-id195 . -780) (undo-tree-id196 . -780) (undo-tree-id197 . -812) (undo-tree-id198 . -812) (undo-tree-id199 . -840) (undo-tree-id200 . -840) (undo-tree-id201 . -882) (undo-tree-id202 . -882) (undo-tree-id203 . -935) (undo-tree-id204 . -935) (undo-tree-id205 . -977) (undo-tree-id206 . -977) (undo-tree-id207 . -1024) (undo-tree-id208 . -1024) (undo-tree-id209 . -1075) (undo-tree-id210 . -1075) (undo-tree-id211 . -1081) (undo-tree-id212 . -1081) (undo-tree-id213 . -1133) (undo-tree-id214 . -1133) (undo-tree-id215 . -1179) (undo-tree-id216 . -1179) (undo-tree-id217 . -1235) (undo-tree-id218 . -1235) (undo-tree-id219 . -1287) (undo-tree-id220 . -1287) (undo-tree-id221 . -1293) (undo-tree-id222 . -1293) (undo-tree-id223 . -1542) (undo-tree-id224 . -1) (undo-tree-id225 . -20) (undo-tree-id226 . -234) (undo-tree-id227 . -306) (undo-tree-id228 . -577) (undo-tree-id229 . -599) (undo-tree-id230 . -577) (undo-tree-id231 . -599) (undo-tree-id232 . -899) (undo-tree-id233 . -934) (undo-tree-id234 . -999) (undo-tree-id235 . -1023) (undo-tree-id236 . -1206) (undo-tree-id237 . -1234) (undo-tree-id238 . -1407) (undo-tree-id239 . -1463) (undo-tree-id240 . -1542) (undo-tree-id241 . -1542) (undo-tree-id242 . -1542) (undo-tree-id243 . -643) (undo-tree-id244 . -1542) (undo-tree-id245 . -1542) 4317 (t 25192 5454 725588 823000)) nil (25192 5610 736236 0) 0 nil])
([nil nil ((#("ERC20TokenFactory," 0 18 (fontified t)) . 146) (t 25192 5610 738575 101000)) nil (25192 5716 292359 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 146) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (25192 5716 292359 0) 0 nil])
([nil nil ((#("    ERC20Token," 0 1 (fontified t ws-butler-chg delete) 1 15 (fontified t)) . 146)) nil (25192 5718 842058 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 142) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) 146) nil (25192 5721 157626 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 146) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1)) ((nil ws-butler-chg delete 147 . 148) (146 . 147)) (25192 5718 110595 0) 0 nil])
([nil nil ((#("TrustListFactory," 0 17 (fontified t)) . 108) (t 25192 5721 159573 257000)) nil (25192 7164 964960 0) 0 nil])
([nil nil ((#("    ERC20Base," 0 1 (fontified t ws-butler-chg delete) 1 14 (fontified t)) . 146)) ((nil ws-butler-chg delete 160 . 161) (146 . 160)) (25192 5717 305712 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 108) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1)) nil (25192 7164 964959 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 146) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1)) ((nil ws-butler-chg delete 147 . 148) (146 . 147)) (25192 5716 292538 0) 0 nil])
([nil nil ((#("    EFCRVVault," 0 1 (fontified t ws-butler-chg delete) 1 15 (fontified t)) . 108) (undo-tree-id620 . -15)) nil (25192 7164 964957 0) 0 nil])
([nil nil ((#("    TestERC20" 0 1 (fontified t ws-butler-chg delete) 1 13 (fontified t)) . 146)) ((nil ws-butler-chg delete 159 . 160) (146 . 159)) (25192 5716 292343 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 108) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1)) nil (25192 7164 964956 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 108) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1)) nil (25192 7164 964954 0) 0 nil])
([nil nil ((#("    ERC20Base," 0 1 (fontified t ws-butler-chg delete) 1 14 (fontified t)) . 108) (undo-tree-id611 . -14)) nil (25192 7164 964952 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 108) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1)) nil (25192 7164 964951 0) 0 nil])
([nil nil ((#("    TestERC20" 0 1 (fontified t ws-butler-chg delete) 1 13 (fontified t)) . 108) (undo-tree-id606 . -13)) nil (25192 7164 964948 0) 0 nil])
([nil nil ((#("AddressArray," 0 13 (fontified t)) . 90) (undo-tree-id605 . -13)) nil (25192 7164 964946 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 87) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (#("    " 0 4 (fontified t)) . 86) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) 90) nil (25192 7164 964940 0) 0 nil])
([nil nil ((85 . 90) (t 25192 7164 968742 805000)) nil (25192 7168 704949 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 86) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) (undo-tree-id644 . -4) (undo-tree-id645 . -4) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) (undo-tree-id653 . -4) (undo-tree-id654 . -4) (undo-tree-id655 . -4) (undo-tree-id656 . -4) (undo-tree-id657 . -4) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -4) (undo-tree-id662 . -4) (undo-tree-id663 . -4) (undo-tree-id664 . -4) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -4) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) 90) nil (25192 7168 704944 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 102 . 103) (nil fontified nil 86 . 103) (86 . 103) (t 25192 7168 707303 383000)) nil (25192 7180 66373 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg)) . -107) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (86 . 90) (103 . 104)) nil (25192 7180 66369 0) 0 nil])
([nil nil ((#("\"crv\": ERC20Token," 0 5 (fontified t face font-lock-string-face) 5 18 (fontified t)) . 516) (t 25192 7180 68531 35000)) nil (25192 7199 949349 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 516) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1)) nil (25192 7199 949348 0) 0 nil])
([nil nil ((#("    \"ef-token\":ERC20Token," 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 14 (fontified t face font-lock-string-face) 14 26 (fontified t)) . 516)) nil (25192 7199 949346 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 516) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1)) nil (25192 7199 949346 0) 0 nil])
([nil nil ((#("    \"vault\":EFCRVVault" 0 1 (fontified t ws-butler-chg delete) 1 3 (fontified t) 3 4 (fontified t) 4 11 (fontified t face font-lock-string-face) 11 19 (fontified t) 19 22 (fontified t)) . 516)) nil (25192 7199 949344 0) 0 nil])
([nil nil ((#("usdc" 0 4 (fontified t face font-lock-string-face)) . 493) (undo-tree-id733 . -4) (undo-tree-id734 . -4)) nil (25192 7199 949344 0) 0 nil])
([nil nil ((#(" ERC20Token," 0 12 (fontified t)) . 495)) nil (25192 7199 949342 0) 0 nil])
([nil nil ((#("VariableDebtToken" 0 16 (fontified t) 16 17 (fontified t rear-nonsticky t)) . 90) (undo-tree-id732 . -17)) nil (25192 7199 949342 0) 0 nil])
([nil nil ((nil fontified nil 106 . 107) (nil fontified nil 90 . 106) (90 . 107)) nil (25192 7199 949337 0) 0 nil])
([nil nil ((nil fontified nil 511 . 512) (nil fontified nil 495 . 511) (495 . 512)) nil (25192 7199 949336 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 513) 512) nil (25192 7199 949332 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 515 . 516) (nil fontified nil 493 . 516) (493 . 516) (t 25192 7199 951795 91000)) nil (25192 7210 417966 0) 0 nil])
([nil nil ((535 . 536) (t 25192 7210 420573 343000)) nil (25192 8399 358963 0) 0 nil])
([nil nil ((536 . 541)) nil (25192 8399 358962 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 597 . 598) (nil fontified nil 541 . 598) (541 . 598)) nil (25192 8399 358962 0) 0 nil])
([nil nil ((553 . 554) (#("\"" 0 1 (fontified nil ws-butler-chg chg)) . 542) (541 . 542) (541 . 542)) nil (25192 8399 358961 0) 0 nil])
([nil nil ((#("= 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;" 0 44 (ws-butler-chg chg fontified t) 44 45 (ws-butler-chg chg fontified t rear-nonsticky t)) . 555) (undo-tree-id801 . -45) (undo-tree-id802 . -45)) nil (25192 8399 358960 0) 0 nil])
([nil nil ((555 . 557)) nil (25192 8399 358958 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . 556) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) 557) nil (25192 8399 358954 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 560 . 561) (nil fontified nil 556 . 561) (556 . 561) (t 25192 8399 363127 733000)) nil (25192 8410 910958 0) 0 nil])
([nil nil ((107 . 108) (t 25192 8410 913371 500000)) nil (25192 8421 229161 0) 0 nil])
([nil nil ((108 . 113)) nil (25192 8421 229160 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 117 . 118) (nil fontified nil 113 . 118) (113 . 118)) nil (25192 8421 229156 0) 0 nil])
([nil nil ((108 . 113) (t 25192 8421 231672 524000)) nil (25192 10124 253787 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 129 . 130) (nil fontified nil 113 . 130) (113 . 130)) nil (25192 10124 253786 0) 0 nil])
([nil nil ((#("VariableDebtToken" 0 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t rear-nonsticky t)) . 113) (undo-tree-id810 . -17) (undo-tree-id811 . -17) (undo-tree-id812 . -17) (undo-tree-id813 . -17) (undo-tree-id814 . -17) (undo-tree-id815 . -17) (undo-tree-id816 . -17) (undo-tree-id817 . -17) (undo-tree-id818 . -17) (undo-tree-id819 . -17) (undo-tree-id820 . -17) (undo-tree-id821 . -17) (undo-tree-id822 . -17) (undo-tree-id823 . -17) (undo-tree-id824 . -17) (undo-tree-id825 . -17) (undo-tree-id826 . -17) (undo-tree-id827 . -17) (undo-tree-id828 . -17) (undo-tree-id829 . -17) (undo-tree-id830 . -17) (undo-tree-id831 . -17) (undo-tree-id832 . -17) (undo-tree-id833 . -17) (undo-tree-id834 . -17) (undo-tree-id835 . -17) (undo-tree-id836 . -17) (undo-tree-id837 . -17) (undo-tree-id838 . -17) (undo-tree-id839 . -17) (undo-tree-id840 . -17) (undo-tree-id841 . -17) (undo-tree-id842 . -17) (undo-tree-id843 . -17) (undo-tree-id844 . -17) (undo-tree-id845 . -17) (undo-tree-id846 . -17) (undo-tree-id847 . -17) (undo-tree-id848 . -17)) nil (25192 10124 253784 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 113) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . 1) (undo-tree-id808 . 1) (undo-tree-id809 . -1)) nil (25192 10124 253765 0) 0 nil])
([nil nil ((85 . 90) (t 25192 10124 257443 465000)) nil (25192 10261 677730 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 98 . 99) (nil fontified nil 90 . 99) (90 . 99)) nil (25192 10261 677729 0) 0 nil])
([nil nil ((99 . 100)) nil (25192 10411 642748 0) 0 nil])
([nil nil ((105 . 114)) nil (25192 10421 443473 0) 0 nil] [nil nil ((#("VariableDebtToken," 0 16 (fontified t) 16 17 (rear-nonsticky t fontified t) 17 18 (fontified t)) . 105) (undo-tree-id944 . -7) (undo-tree-id946 . -7) (undo-tree-id948 . -7) (undo-tree-id950 . -7) (undo-tree-id952 . -18) (t 25192 10261 679884 881000)) ((nil ws-butler-chg delete 123 . 124) (105 . 123)) (25192 10409 866766 0) 0 nil])
([nil nil ((114 . 115)) nil (25192 10421 443472 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 105) (undo-tree-id938 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1)) ((nil ws-butler-chg delete 106 . 107) (105 . 106)) (25192 10407 571043 0) 0 nil])
([nil nil ((142 . 152)) nil (25192 10421 443465 0) 0 nil])
([nil nil ((#("        IAAVE" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 5 (fontified t) 5 8 (fontified t) 8 12 (fontified t) 12 13 (rear-nonsticky t fontified t)) . 105) (undo-tree-id907 . -13) (undo-tree-id908 . -13) (undo-tree-id909 . -13) (undo-tree-id910 . -13) (undo-tree-id911 . -13) (undo-tree-id912 . -13) (undo-tree-id913 . -13) (undo-tree-id914 . -13) (undo-tree-id915 . -13) (undo-tree-id916 . -13) (undo-tree-id917 . -13) (undo-tree-id918 . -13) (undo-tree-id919 . -13) (undo-tree-id920 . -13) (undo-tree-id921 . -4) (undo-tree-id922 . -13) (undo-tree-id923 . -8) (undo-tree-id924 . -4) (undo-tree-id926 . -13) (undo-tree-id928 . -11) (undo-tree-id930 . -11) (undo-tree-id932 . -11) (undo-tree-id934 . -11) (undo-tree-id936 . -13)) ((105 . 118)) (25192 10406 855926 0) 0 nil])
([nil nil ((135 . 139) (#("        " 0 1 (fontified nil) 1 4 (fontified nil) 4 5 (fontified nil) 5 8 (fontified nil)) . 134) (undo-tree-id953 . -4) (undo-tree-id954 . -8) (undo-tree-id955 . -4) (undo-tree-id956 . -8) (undo-tree-id957 . -8) (undo-tree-id958 . -8) (undo-tree-id959 . -8) (undo-tree-id960 . -8) (undo-tree-id961 . -8) (undo-tree-id962 . -8) (undo-tree-id963 . -8) (undo-tree-id964 . -8) (undo-tree-id965 . -8) (undo-tree-id966 . -8) (undo-tree-id967 . -8) (undo-tree-id968 . -8) (undo-tree-id969 . -8) (undo-tree-id970 . -8) (undo-tree-id971 . -8) (undo-tree-id972 . -8) (undo-tree-id973 . -8) (undo-tree-id974 . -8) (undo-tree-id975 . -8) (undo-tree-id976 . -8) (undo-tree-id977 . -8) (undo-tree-id978 . -8) (undo-tree-id979 . -8) (undo-tree-id980 . -8) (undo-tree-id981 . -8) (undo-tree-id982 . -8) (undo-tree-id983 . -8) (undo-tree-id984 . -8) (undo-tree-id985 . -8) (undo-tree-id986 . -8) (undo-tree-id987 . -8) (undo-tree-id988 . -8) (142 . 143) (t 25192 10421 445985 210000)) nil (25192 10462 244147 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 101) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id872 . -4) (undo-tree-id874 . -4) (undo-tree-id876 . -4) (undo-tree-id878 . -4) (undo-tree-id880 . -4) (undo-tree-id882 . -4) (undo-tree-id884 . -4) (undo-tree-id886 . -4) (undo-tree-id888 . -4) (undo-tree-id890 . -4) (undo-tree-id892 . -4) (undo-tree-id894 . -4) (undo-tree-id896 . -4) (undo-tree-id898 . -4) (undo-tree-id900 . -4) (undo-tree-id902 . -4) (undo-tree-id904 . -4) (undo-tree-id906 . -4) 105) ((101 . 105) (t 25192 10309 853619 24000)) (25192 10309 850977 0) 0 nil])
([nil nil ((#("interface.VariableDebtToken," 0 10 (fontified t) 10 26 (fontified t) 26 27 (rear-nonsticky t fontified t) 27 28 (fontified t)) . 105) (undo-tree-id1067 . -9) (undo-tree-id1068 . -28) (t 25192 10462 246484 285000)) nil (25192 10499 213153 0) 0 nil])
nil
([nil nil ((#("   interface.IAAVE" 0 3 (fontified t) 3 13 (fontified t) 13 17 (fontified t) 17 18 (rear-nonsticky t fontified t)) . 108) (undo-tree-id1031 . -18) (undo-tree-id1032 . -18) (undo-tree-id1033 . -18) (undo-tree-id1034 . -18) (undo-tree-id1035 . -18) (undo-tree-id1036 . -18) (undo-tree-id1037 . -18) (undo-tree-id1038 . -18) (undo-tree-id1039 . -18) (undo-tree-id1040 . -18) (undo-tree-id1041 . -18) (undo-tree-id1042 . -18) (undo-tree-id1043 . -13) (undo-tree-id1044 . -18) (undo-tree-id1045 . -18) (undo-tree-id1046 . -18) (undo-tree-id1047 . -13) (undo-tree-id1048 . -13) (undo-tree-id1049 . -13) (undo-tree-id1050 . -13) (undo-tree-id1051 . -13) (undo-tree-id1052 . -13) (undo-tree-id1053 . -13) (undo-tree-id1054 . -13) (undo-tree-id1055 . -13) (undo-tree-id1056 . -13) (undo-tree-id1057 . -13) (undo-tree-id1058 . -13) (undo-tree-id1059 . -13) (undo-tree-id1060 . -13) (undo-tree-id1061 . -13) (undo-tree-id1062 . -13) (undo-tree-id1063 . -13) (undo-tree-id1064 . -13) (undo-tree-id1065 . -3) (undo-tree-id1066 . -3)) nil (25192 10499 213151 0) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . 102) (undo-tree-id1030 . -3)) nil (25192 10499 213134 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 103) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#(" " 0 1 (fontified t)) . 101) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) 99) nil (25192 10499 213129 0) 0 nil])
([nil nil ((514 . 524) (t 25192 10499 221660 826000)) nil (25192 10526 243384 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 570 . 571) (nil fontified nil 562 . 571) (562 . 571) (t 25192 10526 246194 62000)) nil (25192 10532 597151 0) 0 nil])
([nil current ((571 . 572)) nil (25192 10532 597147 0) 0 nil])
nil
