(undo-tree-save-format-version . 1)
"59726b2ac838b6eaac9c14d57a9906f330b5d27c"
[nil nil nil nil (25193 29290 970749 0) 0 nil]
([nil nil ((291 . 296) (t 25193 28607 704018 983000)) nil (25193 29290 970748 0) 0 nil])
([nil nil ((296 . 298)) nil (25193 29290 970748 0) 0 nil])
([nil nil ((#("E" 0 1 (fontified t ws-butler-chg chg)) . -296) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("F" 0 1 (fontified t ws-butler-chg chg)) . -297) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("L" 0 1 (fontified t ws-butler-chg chg)) . -298) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -299) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (298 . 300)) nil (25193 29290 970745 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 292) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) 296) nil (25193 29290 970701 0) 0 nil])
([nil nil ((291 . 296) (t 25193 29290 972426 668000)) nil (25193 29330 437326 0) 0 nil])
([nil nil ((296 . 301)) nil (25193 29330 437326 0) 0 nil])
([nil nil ((301 . 303)) nil (25193 29330 437325 0) 0 nil])
([nil nil ((303 . 312)) nil (25193 29330 437325 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t ws-butler-chg chg)) . -303) (undo-tree-id191 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -304) (undo-tree-id192 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -305) (undo-tree-id193 . -1) (#("T" 0 1 (fontified t ws-butler-chg chg)) . -306) (undo-tree-id194 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -307) (undo-tree-id195 . -1) (#("k" 0 1 (fontified t ws-butler-chg chg)) . -308) (undo-tree-id196 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -309) (undo-tree-id197 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -310) (undo-tree-id198 . -1) (#("," 0 1 (fontified t ws-butler-chg chg)) . -311) (undo-tree-id199 . -1) 312) nil (25193 29330 437323 0) 0 nil])
([nil nil ((303 . 304)) nil (25193 29330 437318 0) 0 nil])
([nil nil ((304 . 305)) nil (25193 29330 437318 0) 0 nil])
([nil nil ((305 . 307)) nil (25193 29330 437318 0) 0 nil])
([nil nil ((307 . 310)) nil (25193 29330 437317 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg)) . -309) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 310) nil (25193 29330 437315 0) 0 nil])
([nil nil ((309 . 310)) nil (25193 29330 437300 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -308) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (t 25193 29330 439067 11000)) nil (25193 29335 505260 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -487) (undo-tree-id254 . -1) (t 25193 29335 507043 374000)) nil (25193 29359 378329 0) 0 nil])
([nil nil ((487 . 488)) nil (25193 29359 378327 0) 0 nil])
([nil nil ((#("addExtraToken" 0 13 (fontified t)) . 502) (undo-tree-id250 . -13) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -13)) nil (25193 29359 378326 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -501) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 502) nil (25193 29359 378322 0) 0 nil])
([nil nil ((#("account_crv = accounts[-1]" 0 11 (fontified t face font-lock-variable-name-face) 11 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face))) . 753) (t 25193 29359 380193 685000)) nil (25193 29375 531682 0) 0 nil])
([nil nil ((#("crv = get_contract(\"crv\")" 0 3 (fontified t face font-lock-variable-name-face) 3 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 24 (fontified t face font-lock-string-face) 24 25 (fontified t face (rainbow-delimiters-depth-1-face))) . 807)) nil (25193 29375 531681 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 807) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1)) nil (25193 29375 531680 0) 0 nil])
([nil nil ((#("    usdc = get_contract(\"usdc\")" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 8 (fontified t face font-lock-variable-name-face) 8 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 30 (fontified t face font-lock-string-face) 30 31 (fontified t face (rainbow-delimiters-depth-1-face))) . 807)) nil (25193 29375 531678 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 799) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (#("    " 0 4 (fontified t)) . 749) (undo-tree-id260 . -4) 807) nil (25193 29375 531675 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 800) (undo-tree-id314 . -1) (t 25193 29375 533564 401000)) nil (25193 29392 592141 0) 0 nil])
([nil nil ((#("    balance = crv.balanceOf(account_crv, {\"from\": account})" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 48 (fontified t face font-lock-string-face) 48 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t face (rainbow-delimiters-depth-1-face))) . 800)) nil (25193 29392 592140 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 800) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1)) nil (25193 29392 592140 0) 0 nil])
([nil nil ((#("    deposit_amount = balance/10" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 18 (fontified t face font-lock-variable-name-face) 18 31 (fontified t)) . 800) (undo-tree-id305 . -4) (undo-tree-id306 . -31) (undo-tree-id307 . -14) (undo-tree-id308 . -31) (undo-tree-id309 . -28) (undo-tree-id310 . -31)) nil (25193 29392 592138 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 800) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . 1) (undo-tree-id303 . 1) (undo-tree-id304 . -1)) nil (25193 29392 592135 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 800) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . 1) (undo-tree-id297 . 1) (undo-tree-id298 . -1)) nil (25193 29392 592132 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 800) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . 1) (undo-tree-id291 . 1) (undo-tree-id292 . -1)) nil (25193 29392 592124 0) 0 nil])
([nil nil ((#("    crv.approve(deploy_vault.address,1000000000000000000000000000000000, " 0 1 (fontified t ws-butler-chg delete) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 18 (fontified t) 18 32 (fontified t) 32 73 (fontified t)) . 800) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -36) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -73)) nil (25193 29392 592121 0) 0 nil])
([nil nil ((#("{\"from\": account_crv})" 0 1 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t face font-lock-string-face) 7 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t face (rainbow-delimiters-unmatched-face))) . 800) (undo-tree-id270 . -22) (undo-tree-id271 . -22) (undo-tree-id272 . -22) (undo-tree-id273 . -6) (undo-tree-id274 . -22) (undo-tree-id275 . -9) (undo-tree-id276 . -22) (undo-tree-id277 . -22) (undo-tree-id278 . -22)) nil (25193 29392 592116 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 800) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . 1) (undo-tree-id268 . 1) (undo-tree-id269 . -1)) nil (25193 29392 592109 0) 0 nil])
([nil nil ((#("balance = crv.balanceOf(account_crv, {\"from\": account})" 0 7 (fontified t face font-lock-variable-name-face) 7 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 44 (fontified t face font-lock-string-face) 44 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t face (rainbow-delimiters-depth-1-face))) . 883) (t 25193 29392 594226 417000)) nil (25193 29502 818999 0) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -855) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -856) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . 1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -857) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -858) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -859) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -860) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -861) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#(":" 0 1 (fontified t)) . -862) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (#(" " 0 1 (fontified t)) . -863) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#("a" 0 1 (fontified t)) . -864) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("c" 0 1 (fontified t)) . -865) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (#("c" 0 1 (fontified t)) . -866) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#("o" 0 1 (fontified t)) . -867) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("u" 0 1 (fontified t)) . -868) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("n" 0 1 (fontified t)) . -869) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (#("t" 0 1 (fontified t)) . -870) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("_" 0 1 (fontified t)) . -871) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (#("c" 0 1 (fontified t)) . -872) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (#("r" 0 1 (fontified t)) . -873) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("v" 0 1 (fontified t)) . -874) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -875) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . 1) (undo-tree-id1538 . -1) 876) nil (25193 29502 818974 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 941 . 942) (nil fontified nil 938 . 942) (nil fontified nil 936 . 938) (nil fontified nil 922 . 936) (nil fontified nil 911 . 922) (nil fontified nil 900 . 911) (nil fontified nil 884 . 900) (nil fontified nil 873 . 884) (nil fontified nil 862 . 873) (nil fontified nil 856 . 862) (nil fontified nil 855 . 856) (855 . 942)) nil (25193 29515 578287 0) 0 nil])
([nil nil ((#("gas_strategy" 0 12 (fontified t)) . 886) (undo-tree-id1543 . -12) (undo-tree-id1544 . -4) (undo-tree-id1545 . -4) (undo-tree-id1546 . -12) (undo-tree-id1547 . -4) 890) nil (25193 29527 758720 0) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . 945) 942) ((945 . 949) (t 25193 29502 821279 40000)) (25193 29515 147138 0) 0 nil])
([nil nil ((886 . 889)) nil (25193 29527 758708 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg delete)) . 873) (#("s" 0 1 (fontified t ws-butler-chg delete)) . 873) (#("a" 0 1 (fontified t ws-butler-chg delete)) . 873) (#("g" 0 1 (fontified t ws-butler-chg delete)) . 873) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 873) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . 1) (undo-tree-id1542 . -1) (t 25193 29502 821279 40000)) ((nil ws-butler-chg delete 874 . 875) (873 . 874) (nil ws-butler-chg delete 874 . 875) (873 . 874) (nil ws-butler-chg delete 874 . 875) (873 . 874) (nil ws-butler-chg delete 874 . 875) (873 . 874) (nil ws-butler-chg delete 874 . 875) (873 . 874)) (25193 29515 146117 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 936) 889) nil (25193 29527 758704 0) 0 nil])
nil
([nil nil ((933 . 935) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 933) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (t 25193 29527 761225 183000)) nil (25193 29532 502242 0) 0 nil])
([nil nil ((144 . 149) (t 25193 29532 504680 62000)) nil (25193 29765 682159 0) 0 nil])
([nil nil ((149 . 153)) nil (25193 29765 682156 0) 0 nil])
([nil nil ((apply -216 946 6506 undo--wrap-and-run-primitive-undo 946 6506 ((6489 . 6491) (6472 . 6474) (6418 . 6420) (6384 . 6386) (6339 . 6341) (6271 . 6273) (6207 . 6209) (6144 . 6146) (6122 . 6124) (6105 . 6107) (6033 . 6035) (5933 . 5935) (5911 . 5913) (5847 . 5849) (5784 . 5786) (5723 . 5725) (5660 . 5662) (5584 . 5586) (5524 . 5526) (5461 . 5463) (5402 . 5404) (5340 . 5342) (5283 . 5285) (5215 . 5217) (5198 . 5200) (5118 . 5120) (5094 . 5096) (5036 . 5038) (4974 . 4976) (4917 . 4919) (4849 . 4851) (4832 . 4834) (4752 . 4754) (4728 . 4730) (4670 . 4672) (4608 . 4610) (4551 . 4553) (4483 . 4485) (4466 . 4468) (4386 . 4388) (4362 . 4364) (4304 . 4306) (4242 . 4244) (4185 . 4187) (4117 . 4119) (4100 . 4102) (4020 . 4022) (3996 . 3998) (3938 . 3940) (3876 . 3878) (3819 . 3821) (3751 . 3753) (3734 . 3736) (3654 . 3656) (3630 . 3632) (3571 . 3573) (3509 . 3511) (3452 . 3454) (3384 . 3386) (3367 . 3369) (3287 . 3289) (3263 . 3265) (3228 . 3230) (3184 . 3186) (3116 . 3118) (3073 . 3075) (3011 . 3013) (2944 . 2946) (2921 . 2923) (2878 . 2880) (2810 . 2812) (2767 . 2769) (2705 . 2707) (2638 . 2640) (2615 . 2617) (2572 . 2574) (2504 . 2506) (2461 . 2463) (2399 . 2401) (2332 . 2334) (2309 . 2311) (2266 . 2268) (2198 . 2200) (2155 . 2157) (2093 . 2095) (2026 . 2028) (2002 . 2004) (1959 . 1961) (1891 . 1893) (1848 . 1850) (1786 . 1788) (1719 . 1721) (1704 . 1706) (1661 . 1663) (1593 . 1595) (1550 . 1552) (1488 . 1490) (1421 . 1423) (1406 . 1408) (1362 . 1364) (1294 . 1296) (1251 . 1253) (1189 . 1191) (1122 . 1124) (1107 . 1109) (1062 . 1064) (994 . 996) (951 . 953) 6290)) (t 25193 29765 685099 422000)) nil (25193 29800 896664 0) 0 nil])
([nil nil ((#("deposit" 0 7 (fontified t)) . 848) (undo-tree-id1598 . -7) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -7)) nil (25193 29800 896663 0) 0 nil])
([nil nil ((#("_amount" 0 1 (fontified t ws-butler-chg delete) 1 7 (fontified t)) . 848) (undo-tree-id1595 . -7) (undo-tree-id1596 . -7) (undo-tree-id1597 . -7)) nil (25193 29800 896661 0) 0 nil])
([nil nil ((848 . 851)) nil (25193 29800 896659 0) 0 nil])
([nil nil ((851 . 853) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -851) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (851 . 852)) nil (25193 29800 896656 0) 0 nil])
([nil nil ((853 . 861) (852 . 854) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face) ws-butler-chg chg)) . -852) (852 . 853) (t 25193 29800 899064 85000)) nil (25193 29808 234307 0) 0 nil])
([nil nil ((1100 . 1105) (t 25193 29808 237143 662000)) nil (25193 29823 786229 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 1101) (undo-tree-id1602 . -4) (undo-tree-id1603 . -4) (undo-tree-id1604 . -4) (undo-tree-id1605 . -4) (undo-tree-id1606 . -4) (undo-tree-id1607 . -4) (undo-tree-id1608 . -4) (undo-tree-id1609 . -4) (undo-tree-id1610 . -4) (undo-tree-id1611 . -4) (undo-tree-id1612 . -4) (undo-tree-id1613 . -4) (undo-tree-id1614 . -4) (undo-tree-id1615 . -4) (undo-tree-id1616 . -4) (undo-tree-id1617 . -4) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (undo-tree-id1620 . -4) (undo-tree-id1621 . -4) (undo-tree-id1622 . -4) (undo-tree-id1623 . -4) (undo-tree-id1624 . -4) (undo-tree-id1625 . -4) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (undo-tree-id1628 . -4) (undo-tree-id1629 . -4) (undo-tree-id1630 . -4) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) (undo-tree-id1633 . -4) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (undo-tree-id1638 . -4) (undo-tree-id1639 . -4) (undo-tree-id1640 . -4) (undo-tree-id1641 . -4) (undo-tree-id1642 . -4) (undo-tree-id1643 . -4) (undo-tree-id1644 . -4) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -4) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) (undo-tree-id1656 . -4) (undo-tree-id1657 . -4) (undo-tree-id1658 . -4) (undo-tree-id1659 . -4) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) (undo-tree-id1662 . -4) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . -4) (undo-tree-id1666 . -4) (undo-tree-id1667 . -4) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) (undo-tree-id1670 . -4) (undo-tree-id1671 . -4) (undo-tree-id1672 . -4) (undo-tree-id1673 . -4) (undo-tree-id1674 . -4) (undo-tree-id1675 . -4) (undo-tree-id1676 . -4) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4)) nil (25193 29823 786224 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t ws-butler-chg chg)) . -1101) (undo-tree-id1701 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1102) (undo-tree-id1702 . -1) (1101 . 1103) (t 25193 29823 788784 109000)) nil (25193 29856 528068 0) 0 nil])
([nil nil ((1101 . 1106)) nil (25193 29856 528066 0) 0 nil])
([nil nil ((1118 . 1122) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -1118) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (1106 . 1119)) nil (25193 29856 528064 0) 0 nil])
([nil nil ((1122 . 1166)) nil (25193 29856 528044 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1147) (undo-tree-id1716 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1148) (undo-tree-id1717 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1149) (undo-tree-id1718 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1150) (undo-tree-id1719 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1151) (undo-tree-id1720 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1152) (undo-tree-id1721 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1153) (undo-tree-id1722 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1154) (undo-tree-id1723 . -1) (#(":" 0 1 (fontified t)) . -1155) (undo-tree-id1724 . -1) (#(" " 0 1 (fontified t)) . -1156) (undo-tree-id1725 . -1) (#("a" 0 1 (fontified t)) . -1157) (undo-tree-id1726 . -1) (#("c" 0 1 (fontified t)) . -1158) (undo-tree-id1727 . -1) (#("c" 0 1 (fontified t)) . -1159) (undo-tree-id1728 . -1) (#("o" 0 1 (fontified t)) . -1160) (undo-tree-id1729 . -1) (#("u" 0 1 (fontified t)) . -1161) (undo-tree-id1730 . -1) (#("n" 0 1 (fontified t)) . -1162) (undo-tree-id1731 . -1) (#("t" 0 1 (fontified t)) . -1163) (undo-tree-id1732 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1164) (undo-tree-id1733 . -1) (undo-tree-id1734 . 1) (undo-tree-id1735 . -1) 1165 (t 25193 29856 530588 224000)) nil (25193 29869 116349 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1139) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("c" 0 1 (fontified t)) . -1140) (undo-tree-id1709 . -1) (#("c" 0 1 (fontified t)) . -1141) (undo-tree-id1710 . -1) (#("o" 0 1 (fontified t)) . -1142) (undo-tree-id1711 . -1) (#("u" 0 1 (fontified t)) . -1143) (undo-tree-id1712 . -1) (#("n" 0 1 (fontified t)) . -1144) (undo-tree-id1713 . -1) (#("t" 0 1 (fontified t)) . -1145) (undo-tree-id1714 . -1) (#("," 0 1 (fontified t)) . -1146) (undo-tree-id1715 . -1) 1147) nil (25193 29869 116337 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg delete face (rainbow-delimiters-depth-1-face))) . 1140) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . 1) (undo-tree-id1706 . -1) (1139 . 1140) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . -1139) (1139 . 1140) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face) ws-butler-chg chg)) . -1139) (1139 . 1140)) nil (25193 29869 116328 0) 0 nil])
([nil nil ((1140 . 1145) (t 25193 29869 119182 32000)) nil (25193 29874 184570 0) 0 nil])
([nil nil ((1145 . 1173)) nil (25193 29874 184567 0) 0 nil])
([nil nil ((945 . 947) (944 . 946) (#("\"" 0 1 (fontified nil ws-butler-chg chg)) . -944) (943 . 945) (t 25193 29874 187180 827000)) nil (25193 30104 276723 0) 0 nil])
([nil nil ((947 . 970) (#("\"})" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 2 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t face (rainbow-delimiters-depth-1-face))) . 947) (undo-tree-id1736 . -3) (undo-tree-id1737 . -1) (undo-tree-id1738 . 3) (undo-tree-id1739 . -1) (undo-tree-id1740 . 3)) nil (25193 30104 276719 0) 0 nil])
([nil nil ((970 . 975) (t 25193 30104 279360 21000)) nil (25193 61845 652694 0) 0 nil])
([nil nil ((978 . 980) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -978) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (975 . 979)) nil (25193 61845 652691 0) 0 nil])
([nil nil ((980 . 983) (979 . 981) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face) ws-butler-chg chg)) . -979) (979 . 980) (#(":" 0 1 (fontified t ws-butler-chg chg)) . -979) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (979 . 980) (t 25193 61845 667344 671000)) nil (25193 61859 484348 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t ws-butler-chg chg)) . -986) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -987) (undo-tree-id1762 . -1) (986 . 988) (983 . 984)) nil (25193 61859 484346 0) 0 nil])
([nil nil ((984 . 985)) nil (25193 61859 484344 0) 0 nil])
([nil nil ((985 . 992) (#("\")" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 2 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face))) . 985) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -1) (undo-tree-id1747 . -2) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . 2) (undo-tree-id1757 . -1) (undo-tree-id1758 . 2)) nil (25193 61859 484342 0) 0 nil])
([nil nil ((991 . 992)) nil (25193 61859 484327 0) 0 nil])
([nil nil ((997 . 1000) (996 . 998) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-builtin-face)) . -996) (992 . 997) (t 25193 61859 486668 664000)) nil (25193 61887 254166 0) 0 nil])
([nil nil ((1000 . 1004)) nil (25193 61887 254165 0) 0 nil])
([nil nil ((1004 . 1006)) nil (25193 61887 254164 0) 0 nil])
([nil nil ((1006 . 1027) (#("))" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face))) . 1006) (undo-tree-id1765 . 2)) nil (25193 61887 254161 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -736) (undo-tree-id1766 . -1) (736 . 737) (t 25193 61887 257680 486000)) nil (25193 63464 390484 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1327 . 1328) (nil fontified nil 1327 . 1328) (nil fontified nil 1326 . 1327) (nil fontified nil 1325 . 1326) (nil fontified nil 1318 . 1325) (nil fontified nil 1317 . 1318) (nil fontified nil 1314 . 1317) (nil fontified nil 1312 . 1314) (nil fontified nil 1303 . 1312) (nil fontified nil 1302 . 1303) (nil fontified nil 1299 . 1302) (nil fontified nil 1295 . 1299) (nil fontified nil 1294 . 1295) (nil fontified nil 1293 . 1294) (nil fontified nil 1292 . 1293) (nil fontified nil 1276 . 1292) (nil fontified nil 1270 . 1276) (nil fontified nil 1267 . 1270) (nil fontified nil 1260 . 1267) (nil fontified nil 1256 . 1260) (1256 . 1328) (t 25193 63464 394209 246000)) nil (25193 63728 843296 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1399 . 1400) (nil fontified nil 1399 . 1400) (nil fontified nil 1398 . 1399) (nil fontified nil 1397 . 1398) (nil fontified nil 1390 . 1397) (nil fontified nil 1389 . 1390) (nil fontified nil 1386 . 1389) (nil fontified nil 1384 . 1386) (nil fontified nil 1375 . 1384) (nil fontified nil 1374 . 1375) (nil fontified nil 1371 . 1374) (nil fontified nil 1367 . 1371) (nil fontified nil 1366 . 1367) (nil fontified nil 1365 . 1366) (nil fontified nil 1364 . 1365) (nil fontified nil 1348 . 1364) (nil fontified nil 1342 . 1348) (nil fontified nil 1339 . 1342) (nil fontified nil 1332 . 1339) (nil fontified nil 1328 . 1332) (1328 . 1400)) nil (25193 63728 843292 0) 0 nil])
([nil nil ((#("Volume()" 0 6 (ws-butler-chg chg fontified t) 6 7 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face))) . 1286)) nil (25193 63728 843290 0) 0 nil])
([nil nil ((1286 . 1288)) nil (25193 63728 843289 0) 0 nil])
([nil nil ((1288 . 1298)) nil (25193 63728 843289 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . 1260)) nil (25193 63728 843288 0) 0 nil])
([nil nil ((1260 . 1270)) nil (25193 63728 843288 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t face font-lock-string-face)) . 1311) (undo-tree-id1814 . -7) (undo-tree-id1815 . -7) 1316) nil (25193 63728 843287 0) 0 nil])
([nil nil ((1311 . 1314)) nil (25193 63728 843286 0) 0 nil])
([nil nil ((1314 . 1321)) nil (25193 63728 843285 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t)) . 1328) (undo-tree-id1812 . -7) (undo-tree-id1813 . -7)) nil (25193 63728 843285 0) 0 nil])
([nil nil ((1328 . 1330)) nil (25193 63728 843283 0) 0 nil])
([nil nil ((1328 . 1338) (#("co" 0 2 (fontified nil ws-butler-chg chg)) . -1328) (1328 . 1330) (#("collateral" 0 10 (fontified nil ws-butler-chg chg)) . -1328) (1328 . 1338) (#("co" 0 2 (ws-butler-chg chg fontified t)) . -1328) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) 1330) nil (25193 63728 843282 0) 0 nil])
([nil nil ((#("Volume()" 0 6 (ws-butler-chg chg fontified t) 6 7 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face))) . 1371)) nil (25193 63728 843280 0) 0 nil])
([nil nil ((1375 . 1377) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -1375) (1371 . 1376)) nil (25193 63728 843279 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . 1345) (undo-tree-id1808 . -7) (undo-tree-id1809 . -7)) nil (25193 63728 843278 0) 0 nil])
([nil nil ((1345 . 1349)) nil (25193 63728 843277 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t face font-lock-string-face)) . 1384) (undo-tree-id1802 . -7) (undo-tree-id1803 . 7) (undo-tree-id1804 . -7) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -7)) nil (25193 63728 843276 0) 0 nil])
([nil nil ((1384 . 1389)) nil (25193 63728 843273 0) 0 nil])
([nil nil ((#("volumne" 0 7 (ws-butler-chg chg fontified t)) . 1396) (undo-tree-id1767 . -7) (undo-tree-id1768 . -7) (undo-tree-id1769 . -7) (undo-tree-id1770 . -6) (undo-tree-id1771 . -7) (undo-tree-id1772 . -6) (undo-tree-id1773 . -6) (undo-tree-id1774 . -6) (undo-tree-id1775 . -6) (undo-tree-id1776 . -6) (undo-tree-id1777 . -6) (undo-tree-id1778 . -6) (undo-tree-id1779 . -5) (undo-tree-id1780 . -6) (undo-tree-id1781 . -5) (undo-tree-id1782 . -5) (undo-tree-id1783 . -5) (undo-tree-id1784 . -5) (undo-tree-id1785 . -5) (undo-tree-id1786 . -5) (undo-tree-id1787 . -5) (undo-tree-id1788 . -4) (undo-tree-id1789 . -5) (undo-tree-id1790 . -4) (undo-tree-id1791 . -4) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -4) (undo-tree-id1800 . -4) (undo-tree-id1801 . -7)) nil (25193 63728 843271 0) 0 nil])
([nil nil ((1396 . 1400)) nil (25193 63728 843239 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -1293) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (1293 . 1294) (#("a" 0 1 (fontified t)) . -1293) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (t 25193 63728 847201 118000)) nil (25193 63878 284202 0) 0 nil])
([nil nil ((1293 . 1294)) nil (25193 63878 284171 0) 0 nil])
([nil nil ((1294 . 1295) (t 25193 63878 288324 621000)) nil (25193 63890 158979 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 320) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (t 25193 63890 161781 401000)) nil (25194 13211 352723 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 319) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . 1) (undo-tree-id83 . 1) (undo-tree-id84 . -1) (t 25194 13211 355870 669000)) nil (25194 13213 554302 0) 0 nil])
([nil nil ((820 . 825) (t 25194 13213 556914 12000)) nil (25194 13244 986970 0) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -825) (undo-tree-id181 . -1) (825 . 826)) nil (25194 13244 986970 0) 0 nil])
([nil nil ((#("log(\"1\")" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t) 4 7 (face font-lock-string-face fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . 812)) nil (25194 13244 986969 0) 0 nil])
([nil nil ((#("log(\"add _asset \")" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t) 4 17 (face font-lock-string-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t)) . 787)) nil (25194 13244 986968 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 787) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1)) nil (25194 13244 986968 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 787) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1)) nil (25194 13244 986964 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 787) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1)) nil (25194 13244 986962 0) 0 nil])
([nil nil ((#("    " 0 1 (ws-butler-chg delete fontified t) 1 4 (fontified t)) . 787)) nil (25194 13244 986960 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 787) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1)) nil (25194 13244 986960 0) 0 nil])
([nil nil ((#("    " 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t ws-butler-chg chg)) . 787)) nil (25194 13244 986958 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 787) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1)) nil (25194 13244 986957 0) 0 nil])
([nil nil ((784 . 788) (#("        " 0 4 (fontified nil) 4 5 (ws-butler-chg delete fontified nil) 5 8 (fontified nil)) . 783) (undo-tree-id85 . -8) (undo-tree-id86 . -7) (undo-tree-id87 . -6) (undo-tree-id88 . -7) (undo-tree-id89 . -6) (undo-tree-id90 . -7) (undo-tree-id91 . -7) (undo-tree-id92 . -7) (undo-tree-id93 . -7) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -7) (undo-tree-id105 . -7) (undo-tree-id106 . -7) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -8) (undo-tree-id112 . -7) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -8) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -8) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (791 . 792)) nil (25194 13244 986951 0) 0 nil])
([nil nil ((884 . 927) (#(" " 0 1 (fontified nil)) . 883) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (884 . 885) (t 25194 13244 990250 136000)) nil (25194 13262 535647 0) 0 nil])
([nil nil ((948 . 949) (t 25194 13262 538460 873000)) nil (25194 13270 848755 0) 0 nil])
([nil nil ((862 . 905) (#(" " 0 1 (fontified nil)) . 861) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (862 . 863) (t 25194 13270 851542 226000)) nil (25194 13278 234926 0) 0 nil])
([nil nil ((992 . 1035) (#(" " 0 1 (fontified nil)) . 991) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (992 . 993) (t 25194 13278 237697 356000)) nil (25194 13283 738398 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1120) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (t 25194 13283 741201 667000)) nil (25194 13293 55521 0) 0 nil])
([nil nil ((#("    # log(\"balance of crv\", str(balance))" 0 1 (ws-butler-chg delete fontified t) 1 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 41 (face font-lock-comment-face fontified t)) . 1120)) nil (25194 13293 55520 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1120) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1)) nil (25194 13293 55519 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1120) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1)) nil (25194 13293 55517 0) 0 nil])
([nil nil ((#("    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})" 0 1 (ws-butler-chg delete fontified t) 1 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 67 (face font-lock-comment-face fontified t)) . 1120)) nil (25194 13293 55516 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1120) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1)) nil (25194 13293 55515 0) 0 nil])
([nil nil ((#("    # log(\"balance of enf\", str(balance))" 0 1 (ws-butler-chg delete fontified t) 1 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 41 (face font-lock-comment-face fontified t)) . 1120)) nil (25194 13293 55508 0) 0 nil])
([nil nil ((1081 . 1082)) nil (25194 13293 55505 0) 0 nil])
([nil nil ((1061 . 1066) (t 25194 13293 58092 890000)) nil (25194 13312 148233 0) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t)) . -1066) (undo-tree-id296 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -1067) (undo-tree-id297 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t)) . -1068) (undo-tree-id298 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -1069) (undo-tree-id299 . -1) (1066 . 1070)) nil (25194 13312 148232 0) 0 nil])
([nil nil ((#("h" 0 1 (ws-butler-chg chg fontified t)) . -1066) (undo-tree-id295 . -1) (1066 . 1067)) nil (25194 13312 148229 0) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1062) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4)) nil (25194 13312 148224 0) 0 nil])
([nil nil ((1062 . 1067) (t 25194 13312 151290 982000)) nil (25194 13325 714005 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1219 . 1220) (nil fontified nil 1185 . 1220) (nil fontified nil 1183 . 1185) (nil fontified nil 1180 . 1183) (nil fontified nil 1179 . 1180) (nil fontified nil 1178 . 1179) (nil fontified nil 1117 . 1178) (nil fontified nil 1115 . 1117) (nil fontified nil 1112 . 1115) (nil fontified nil 1111 . 1112) (nil fontified nil 1110 . 1111) (nil fontified nil 1109 . 1110) (nil fontified nil 1074 . 1109) (nil fontified nil 1072 . 1074) (nil fontified nil 1069 . 1072) (nil fontified nil 1068 . 1069) (nil fontified nil 1067 . 1068) (1067 . 1220)) nil (25194 13325 714004 0) 0 nil])
([nil nil ((1220 . 1225)) nil (25194 13325 714001 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1295 . 1296) (nil fontified nil 1225 . 1296) (1225 . 1296)) nil (25194 13325 714000 0) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1063) (undo-tree-id300 . -4) (undo-tree-id301 . -4) 1296) nil (25194 13325 713997 0) 0 nil])
([nil nil ((#("brownie_contract" 0 16 (fontified t)) . 1238) (undo-tree-id305 . -16) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -16) (t 25194 13325 716924 668000)) nil (25194 13352 992203 0) 0 nil])
([nil nil ((1238 . 1241)) nil (25194 13352 992201 0) 0 nil])
([nil nil ((1241 . 1246)) nil (25194 13352 992200 0) 0 nil])
([nil nil ((1246 . 1247)) nil (25194 13352 992199 0) 0 nil])
([nil nil ((1238 . 1250) (#("de" 0 2 (ws-butler-chg chg fontified nil)) . -1238) (1238 . 1240) (#("deploy_vault" 0 12 (ws-butler-chg chg fontified nil)) . -1238) (1238 . 1250) (#("deploy_va" 0 9 (ws-butler-chg chg fontified t)) . -1238) (undo-tree-id302 . -9) (undo-tree-id303 . -9) (undo-tree-id304 . -9) 1247) nil (25194 13352 992196 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1252) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("v" 0 1 (fontified t)) . -1253) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (fontified t)) . -1254) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("n" 0 1 (fontified t)) . -1255) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t)) . -1256) (undo-tree-id15 . -1) 1257 (t 25194 13352 995612 227000)) nil (25194 13421 702323 0) 0 nil])
([nil nil ((1252 . 1254) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -1252) (1252 . 1253)) nil (25194 13421 702318 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1262 . 1263) (nil fontified nil 1253 . 1263) (1253 . 1263)) nil (25194 13421 702317 0) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("v" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("r" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("n" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("i" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("_" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("l" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("l" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 1271) (#("p" 0 1 (fontified t)) . 1271) (#("t" 0 1 (fontified t)) . -1266) (undo-tree-id0 . -1) (#("i" 0 1 (fontified t)) . -1267) (undo-tree-id1 . -1) (#("m" 0 1 (fontified t)) . -1268) (undo-tree-id2 . -1) (#("e" 0 1 (fontified t)) . -1269) (undo-tree-id3 . -1) (#("o" 0 1 (fontified t)) . -1270) (undo-tree-id4 . -1) (#("u" 0 1 (fontified t)) . -1271) (undo-tree-id5 . -1) (#("t" 0 1 (fontified t)) . -1272) (undo-tree-id6 . -1) (#("=" 0 1 (fontified t)) . -1273) (undo-tree-id7 . -1) 1274) nil (25194 13421 702314 0) 0 nil])
([nil nil ((#("=" 0 1 (ws-butler-chg delete fontified t)) . 1271)) nil (25194 13421 702279 0) 0 nil])
([nil nil ((99 . 102) (t 25194 13421 705344 945000)) nil (25194 13435 553110 0) 0 nil])
([nil nil ((100 . 116) (#("li" 0 2 (ws-butler-chg chg fontified nil)) . -100) (100 . 102) (#("listen_for_event(brownie_contract, event, timeout, poll_interval)" 0 65 (ws-butler-chg chg fontified nil)) . -100) (100 . 165) (#("li" 0 2 (ws-butler-chg chg fontified t)) . -100) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -1) (undo-tree-id19 . -2) (undo-tree-id20 . -1) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) 102) nil (25194 13435 553106 0) 0 nil])
([nil nil ((37 . 6869) (#("
from scripts.helpful_scripts import get_account, get_contract,listen_for_event
from conftest import *
from brownie import (
    Wei,
    accounts,
    Contract,
    config,
    network,
    ERC20TokenFactory,
    AddressArray,
    ERC20Token,
    TrustListFactory,
    TrustList,
    EFLeverVault,

)
def log(text, desc=''):
    print('\\033[32m' + text + '\\033[0m' + desc)

def test_can_get_latest_price(deploy_safeerc20,deploy_addressArray,deploy_tl,gett_token_tl,deploy_el,deploy_vault):
    # Arrange

    # address = get_contract(\"eth_usd_price_feed\").address
    # # Act
    # price_feed = PriceFeedConsumer.deploy(address, {\"from\": get_account()})
    # # Assert
    # value = price_feed.getLatestPrice({\"from\": get_account()})


    account = accounts[0]

    deploy_vault.deposit(Wei(\"10 ether\"), {\"from\": account, \"gas_price\": 100,
                                           \"gas_limit\": 3000000,
                                           \"allow_revert\": True,
                                           \"value\": Wei(\"10 ether\")})


    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))
    listen_for_event(deploy_vault, \"CFFDeposit\", 200, 2)
    log(\"ef balance \", str(deploy_el.balanceOf(account)))



    volumne = deploy_vault.getVolume()
    log(\"volumne\", str(volumne))
    collateral = deploy_vault.getCollecteral()
    log(\"collateral\", str(collateral))
    debt = deploy_vault.getDebt()
    log(\"Debt \", str(debt))



    # log(\"1\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))


    # log(\"2\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))

    # log(\"3\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))

    # log(\" deposit 1\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))

    # log(\"deposit 2\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))

    # log(\"deposit 3\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))

    # log(\"deposit 4\")
    # deploy_vault.deposit(deposit_amount, {\"from\": account_crv})

    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))


    # withdraw_amount = balance/10
    # log(\"withdraw 1\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))


    # log(\"withdraw 2\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))

    # log(\"withdraw 3\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))

    # log(\"withdraw 4\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))

    # log(\"withdraw 5\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))

    # log(\"withdraw 6\")
    # tx = deploy_vault.withdraw(withdraw_amount, False, {\"from\": account_crv})
    # tx.wait(1)
    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf after withdraw\", str(balance))
    # balance = crv.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of crv after withdraw\", str(balance))


    # balance = usdc.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of usdc before withdraw\", str(balance))

    # deploy_vault.withdraw(withdraw_amount, True, {\"from\": account_crv})


    # balance = usdc.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of usdc after  withdraw\", str(balance))


    # balance = usdc.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of usdc before depositstable\", str(balance))
    # print(balance)

    # usdc.approve(deploy_vault.address,1000000000000000000000000000000000, {\"from\": account_crv})

    # tx = deploy_vault.depositStable(balance/2, {\"from\": account_crv})
    # tx.wait(1)
    # chain.sleep(1)

    # balance = usdc.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of usdc after depositStable\", str(balance))

    # balance = deploy_ef.balanceOf(account_crv, {\"from\": account})
    # log(\"balance of enf\", str(balance))



    # log(\"start earn rewards\")
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 30 (fontified t) 30 36 (face font-lock-keyword-face fontified t) 36 62 (fontified t) 62 63 (fontified t) 63 79 (fontified t) 79 80 (fontified t) 80 84 (face font-lock-keyword-face fontified t) 84 94 (fontified t) 94 100 (face font-lock-keyword-face fontified t) 100 103 (fontified t) 103 107 (face font-lock-keyword-face fontified t) 107 116 (fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t) 124 299 (fontified t) 299 300 (fontified t) 300 301 (face (rainbow-delimiters-depth-1-face) fontified t) 301 302 (fontified t) 302 305 (face font-lock-keyword-face fontified t) 305 306 (fontified t) 306 309 (face font-lock-function-name-face fontified t) 309 310 (face (rainbow-delimiters-depth-1-face) fontified t) 310 321 (fontified t) 321 323 (face font-lock-string-face fontified t) 323 324 (face (rainbow-delimiters-depth-1-face) fontified t) 324 330 (fontified t) 330 335 (face font-lock-keyword-face fontified t) 335 336 (face (rainbow-delimiters-depth-1-face) fontified t) 336 346 (face font-lock-string-face fontified t) 346 356 (fontified t) 356 365 (face font-lock-string-face fontified t) 365 372 (fontified t) 372 373 (face (rainbow-delimiters-depth-1-face) fontified t) 373 375 (fontified t) 375 378 (face font-lock-keyword-face fontified t) 378 379 (fontified t) 379 404 (face font-lock-function-name-face fontified t) 404 405 (face (rainbow-delimiters-depth-1-face) fontified t) 405 479 (fontified t) 479 481 (fontified t) 481 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-1-face) fontified t) 489 491 (fontified t) 491 495 (fontified t) 495 497 (face font-lock-comment-delimiter-face fontified t) 497 505 (face font-lock-comment-face fontified t) 505 510 (fontified t) 510 512 (face font-lock-comment-delimiter-face fontified t) 512 565 (face font-lock-comment-face fontified t) 565 569 (fontified t) 569 571 (face font-lock-comment-delimiter-face fontified t) 571 577 (face font-lock-comment-face fontified t) 577 580 (fontified t) 580 581 (fontified t) 581 583 (fontified t face font-lock-comment-delimiter-face) 583 655 (fontified t face font-lock-comment-face) 655 659 (fontified t) 659 661 (face font-lock-comment-delimiter-face fontified t) 661 670 (face font-lock-comment-face fontified t) 670 674 (fontified t) 674 676 (face font-lock-comment-delimiter-face fontified t) 676 735 (face font-lock-comment-face fontified t) 735 741 (fontified t) 741 748 (face font-lock-variable-name-face fontified t) 748 759 (fontified t) 759 760 (face (rainbow-delimiters-depth-1-face) fontified t) 760 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-1-face) fontified t) 762 763 (fontified t) 763 764 (fontified t) 764 768 (fontified t) 768 788 (fontified t) 788 789 (face (rainbow-delimiters-depth-1-face) fontified t) 789 792 (fontified t) 792 793 (face (rainbow-delimiters-depth-2-face) fontified t) 793 803 (face font-lock-string-face fontified t) 803 804 (face (rainbow-delimiters-depth-2-face) fontified t) 804 806 (fontified t) 806 807 (face (rainbow-delimiters-depth-2-face) fontified t) 807 813 (face font-lock-string-face fontified t) 813 824 (fontified t) 824 835 (face font-lock-string-face fontified t) 835 841 (fontified t) 841 842 (fontified t) 842 885 (fontified t) 885 896 (face font-lock-string-face fontified t) 896 906 (fontified t) 906 907 (fontified t) 907 950 (fontified t) 950 964 (face font-lock-string-face fontified t) 964 966 (fontified t) 966 970 (face font-lock-constant-face fontified t) 970 971 (fontified t) 971 972 (fontified t) 972 991 (fontified t) 991 1015 (fontified t) 1015 1022 (face font-lock-string-face fontified t) 1022 1027 (fontified t) 1027 1028 (face (rainbow-delimiters-depth-3-face) fontified t) 1028 1038 (face font-lock-string-face fontified t) 1038 1039 (face (rainbow-delimiters-depth-3-face) fontified t) 1039 1040 (face (rainbow-delimiters-depth-2-face) fontified t) 1040 1041 (face (rainbow-delimiters-depth-1-face) fontified t) 1041 1042 (fontified t) 1042 1043 (fontified t) 1043 1044 (fontified t) 1044 1045 (fontified t) 1045 1048 (fontified t) 1048 1050 (face font-lock-comment-delimiter-face fontified t) 1050 1085 (face font-lock-comment-face fontified t) 1085 1086 (face font-lock-comment-face fontified t) 1086 1087 (fontified t) 1087 1088 (fontified t) 1088 1091 (fontified t) 1091 1093 (face font-lock-comment-delimiter-face fontified t) 1093 1154 (face font-lock-comment-face fontified t) 1154 1155 (face font-lock-comment-face fontified t) 1159 1161 (face font-lock-comment-delimiter-face) 1161 1195 (face font-lock-comment-face) 1195 1196 (face font-lock-comment-face rear-nonsticky t) 1196 1197 (face font-lock-comment-face) 1217 1218 (face (rainbow-delimiters-depth-1-face)) 1232 1233 (face font-lock-string-face) 1233 1242 (face font-lock-string-face) 1242 1243 (face font-lock-string-face rear-nonsticky t) 1243 1244 (face font-lock-string-face) 1252 1253 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t) 1261 1262 (face (rainbow-delimiters-depth-1-face)) 1262 1273 (face font-lock-string-face) 1273 1274 (face font-lock-string-face) 1274 1275 (face font-lock-string-face) 1277 1280 (face font-lock-builtin-face) 1280 1281 (face (rainbow-delimiters-depth-2-face)) 1300 1301 (face (rainbow-delimiters-depth-3-face)) 1308 1309 (face (rainbow-delimiters-depth-3-face)) 1309 1310 (face (rainbow-delimiters-depth-2-face)) 1310 1311 (face (rainbow-delimiters-depth-1-face)) 1319 1326 (face font-lock-variable-name-face) 1351 1352 (face (rainbow-delimiters-depth-1-face)) 1352 1353 (face (rainbow-delimiters-depth-1-face)) 1361 1362 (face (rainbow-delimiters-depth-1-face)) 1362 1371 (face font-lock-string-face) 1373 1376 (face font-lock-builtin-face) 1376 1377 (face (rainbow-delimiters-depth-2-face)) 1384 1385 (face (rainbow-delimiters-depth-2-face)) 1385 1386 (face (rainbow-delimiters-depth-1-face)) 1391 1401 (face font-lock-variable-name-face) 1431 1432 (face (rainbow-delimiters-depth-1-face)) 1432 1433 (face (rainbow-delimiters-depth-1-face)) 1441 1442 (face (rainbow-delimiters-depth-1-face)) 1442 1449 (face font-lock-string-face) 1449 1454 (face font-lock-string-face) 1456 1459 (face font-lock-builtin-face) 1459 1460 (face (rainbow-delimiters-depth-2-face)) 1470 1471 (face (rainbow-delimiters-depth-2-face)) 1471 1472 (face (rainbow-delimiters-depth-1-face)) 1477 1481 (face font-lock-variable-name-face) 1504 1505 (face (rainbow-delimiters-depth-1-face)) 1505 1506 (face (rainbow-delimiters-depth-1-face)) 1514 1515 (face (rainbow-delimiters-depth-1-face)) 1515 1522 (face font-lock-string-face) 1524 1525 (face font-lock-builtin-face) 1525 1527 (face font-lock-builtin-face) 1527 1528 (face (rainbow-delimiters-depth-2-face)) 1532 1533 (face (rainbow-delimiters-depth-2-face)) 1533 1534 (face (rainbow-delimiters-depth-1-face)) 1542 1544 (face font-lock-comment-delimiter-face) 1544 1553 (face font-lock-comment-face) 1557 1559 (face font-lock-comment-delimiter-face) 1559 1602 (face font-lock-comment-face) 1602 1619 (face font-lock-comment-face) 1624 1626 (face font-lock-comment-delimiter-face) 1626 1682 (face font-lock-comment-face) 1686 1688 (face font-lock-comment-delimiter-face) 1688 1724 (face font-lock-comment-face) 1729 1731 (face font-lock-comment-delimiter-face) 1731 1753 (face font-lock-comment-face) 1753 1754 (face font-lock-comment-face) 1754 1793 (face font-lock-comment-face) 1797 1799 (face font-lock-comment-delimiter-face) 1799 1812 (face font-lock-comment-face) 1812 1814 (face font-lock-comment-face) 1814 1835 (face font-lock-comment-face) 1841 1843 (face font-lock-comment-delimiter-face) 1843 1852 (face font-lock-comment-face) 1856 1858 (face font-lock-comment-delimiter-face) 1858 1918 (face font-lock-comment-face) 1923 1925 (face font-lock-comment-delimiter-face) 1925 1973 (face font-lock-comment-face) 1973 1981 (face font-lock-comment-face) 1985 1987 (face font-lock-comment-delimiter-face) 1987 2023 (face font-lock-comment-face) 2028 2030 (face font-lock-comment-delimiter-face) 2030 2035 (face font-lock-comment-face) 2035 2092 (face font-lock-comment-face) 2096 2098 (face font-lock-comment-delimiter-face) 2098 2119 (face font-lock-comment-face) 2119 2134 (face font-lock-comment-face) 2139 2141 (face font-lock-comment-delimiter-face) 2141 2150 (face font-lock-comment-face) 2154 2156 (face font-lock-comment-delimiter-face) 2156 2216 (face font-lock-comment-face) 2221 2223 (face font-lock-comment-delimiter-face) 2223 2279 (face font-lock-comment-face) 2283 2285 (face font-lock-comment-delimiter-face) 2285 2293 (face font-lock-comment-face) 2293 2321 (face font-lock-comment-face)) . 37) (undo-tree-id38 . -1274) (undo-tree-id39 . -1274) (undo-tree-id40 . -187) (undo-tree-id41 . -1042) (undo-tree-id42 . -1042) (undo-tree-id43 . -266) (undo-tree-id44 . -1042) (undo-tree-id45 . -1042) (undo-tree-id46 . -491) (undo-tree-id47 . -1251) (undo-tree-id48 . -1043) (undo-tree-id49 . -1201) (undo-tree-id50 . -1196) (undo-tree-id51 . -1196) (undo-tree-id52 . -1086) (undo-tree-id53 . -1086) (undo-tree-id54 . -1233) (undo-tree-id55 . -1233) (undo-tree-id56 . -491) (undo-tree-id57 . -1218) (undo-tree-id58 . -1233) (undo-tree-id59 . -79) (undo-tree-id60 . -79) (undo-tree-id61 . -79) (undo-tree-id62 . -79) (undo-tree-id63 . -79) (undo-tree-id64 . -79) (undo-tree-id65 . -227) (undo-tree-id66 . -227) (undo-tree-id67 . -79) (undo-tree-id68 . -227) (undo-tree-id69 . -227) (undo-tree-id70 . -227) (undo-tree-id71 . -227) (undo-tree-id72 . -227) (t 25194 13435 556938 678000)) nil (25194 13584 691437 0) 0 nil])
([nil nil ((#("import pytest" 0 6 (face font-lock-keyword-face fontified t) 6 13 (fontified t)) . 1) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -13) (undo-tree-id9 . -13) (undo-tree-id10 . -13) (undo-tree-id11 . -13) (undo-tree-id12 . -13) (undo-tree-id13 . -13) (undo-tree-id14 . -13) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . -13) (undo-tree-id22 . -13) (undo-tree-id23 . -13) (undo-tree-id24 . -13) (undo-tree-id25 . -13) (undo-tree-id26 . -13) (undo-tree-id27 . -13) (undo-tree-id28 . -13) (undo-tree-id29 . -13) (undo-tree-id30 . -13) (undo-tree-id31 . -13) (undo-tree-id32 . -13) (undo-tree-id33 . -13) (undo-tree-id34 . -13) (undo-tree-id35 . -13) (undo-tree-id36 . -13) (undo-tree-id37 . -13) (t 25194 13541 969864 789000)) nil (25194 13584 691422 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) nil (25194 13584 691406 0) 0 nil])
([nil nil ((#("from brownie import *" 0 4 (fontified t face font-lock-keyword-face) 4 13 (fontified t) 13 19 (fontified t face font-lock-keyword-face) 19 21 (fontified t)) . 1) (undo-tree-id19 . -21) (undo-tree-id20 . -21) (undo-tree-id21 . -21) (t 25194 13584 700423 250000)) nil (25194 13700 249583 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1)) nil (25194 13700 249579 0) 0 nil])
([nil nil ((#("    AddressArray," 0 17 (fontified t)) . 23) (undo-tree-id22 . -17) (t 25194 13700 258101 156000)) nil (25194 13706 431316 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . 1) (undo-tree-id27 . 1) (undo-tree-id28 . -1) (t 25194 13706 434791 418000)) nil (25194 13708 620413 0) 0 nil])
([nil nil ((#("    ERC20Token," 0 15 (fontified t)) . 55) (t 25194 13756 911863 607000)) nil (25194 13802 462254 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 55) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1)) nil (25194 13802 462253 0) 0 nil])
([nil nil ((#("    ERC20TokenFactory," 0 1 (fontified t ws-butler-chg delete) 1 22 (fontified t)) . 55)) nil (25194 13802 462243 0) 0 nil])
([nil nil ((#("TrustList," 0 10 (fontified t)) . 60) (t 25194 13802 465602 841000)) nil (25194 13805 893307 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 60) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1)) nil (25194 13805 893306 0) 0 nil])
([nil nil ((#("    TrustListFactory," 0 1 (fontified t ws-butler-chg delete) 1 21 (fontified t)) . 60)) nil (25194 13805 893304 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 56) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) 60) nil (25194 13805 893301 0) 0 nil])
([nil nil ((#("config," 0 7 (fontified t)) . 84) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -7) (undo-tree-id105 . -7) (undo-tree-id106 . -7) (t 25194 13805 896708 664000)) nil (25194 13810 94697 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 80) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) 84) nil (25194 13810 94688 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 55) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (t 25194 13810 97958 503000)) nil (25194 13814 760095 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 55) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . 1) (undo-tree-id123 . 1) (undo-tree-id124 . -1)) nil (25194 13814 760092 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 78) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . 1) (undo-tree-id114 . 1) (undo-tree-id115 . -1)) nil (25194 13814 760085 0) 0 nil])
([nil nil ((#("    # Arrange" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 13 (fontified t face font-lock-comment-face)) . 421) (t 25194 13814 763154 440000)) nil (25194 13833 177707 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1)) nil (25194 13833 177706 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1)) nil (25194 13833 177704 0) 0 nil])
([nil nil ((#("    # address = get_contract(\"eth_usd_price_feed\").address" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 13 (fontified t face font-lock-comment-face) 13 58 (fontified t face font-lock-comment-face)) . 421)) nil (25194 13833 177702 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1)) nil (25194 13833 177701 0) 0 nil])
([nil nil ((#("    # # Act" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 11 (fontified t face font-lock-comment-face)) . 421) (undo-tree-id145 . -11)) nil (25194 13833 177699 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1)) nil (25194 13833 177698 0) 0 nil])
([nil nil ((#("    # price_feed = PriceFeedConsumer.deploy(address, {\"from\": get_account()})" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 9 (fontified t face font-lock-comment-face) 9 36 (fontified t face font-lock-comment-face) 36 47 (fontified t face font-lock-comment-face) 47 57 (fontified t face font-lock-comment-face) 57 71 (fontified t face font-lock-comment-face) 71 77 (fontified t face font-lock-comment-face)) . 421) (undo-tree-id140 . -77)) nil (25194 13833 177696 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1)) nil (25194 13833 177694 0) 0 nil])
([nil nil ((#("    # # Assert" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 14 (fontified t face font-lock-comment-face)) . 421) (undo-tree-id135 . -14)) nil (25194 13833 177692 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 421) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (25194 13833 177691 0) 0 nil])
([nil nil ((#("    # value = price_feed.getLatestPrice({\"from\": get_account()})" 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 64 (fontified t face font-lock-comment-face)) . 421) (undo-tree-id130 . -64)) nil (25194 13833 177686 0) 0 nil])
([nil nil ((#("    Contract," 0 1 (fontified t) 1 13 (fontified t)) . 23) (undo-tree-id156 . -13) (t 25194 13833 181258 220000)) nil (25194 13844 778443 0) 0 nil])
([nil nil ((#("EFLeverVault," 0 13 (fontified t)) . 28) (undo-tree-id161 . -9) (undo-tree-id162 . -9) (undo-tree-id163 . -9) (undo-tree-id164 . -9) (undo-tree-id165 . -9) (undo-tree-id166 . -9) (undo-tree-id167 . -9) (undo-tree-id168 . -9) (undo-tree-id169 . -9) (undo-tree-id170 . -9) (undo-tree-id171 . -9) (undo-tree-id172 . -9) (undo-tree-id173 . -9) (undo-tree-id174 . -9) (undo-tree-id175 . -9) (undo-tree-id176 . -9) (undo-tree-id177 . -13) (t 25194 13844 782011 761000)) nil (25194 13849 690202 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 28) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1)) nil (25194 13849 690191 0) 0 nil])
([nil nil ((#("network," 0 8 (fontified t)) . 55) (undo-tree-id248 . -8) (undo-tree-id249 . -8) (t 25194 13849 693887 841000)) nil (25194 13855 548152 0) 0 nil])
([nil current ((#("    " 0 1 (fontified t) 1 4 (fontified t)) . 51) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) 55) nil (25194 13855 548147 0) 0 nil])
nil
